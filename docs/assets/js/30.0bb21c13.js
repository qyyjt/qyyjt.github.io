(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{452:function(n,e,t){"use strict";t.r(e);var a=t(65),i=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("需求:\n前端代码提交到GitHub,服务器能监听到提交并自动打包")]),n._v(" "),t("p",[n._v("准备:")]),n._v(" "),t("ol",[t("li",[n._v("服务器:\n云服务器比如阿里云或者公司的能接收外网请求的测试服务器,\n服务器装好nodejs,git,nginx,pm2(选装),yarn(选装)")]),n._v(" "),t("li",[n._v("GitHub账户;或者带webhook的gitlab账户")]),n._v(" "),t("li",[n._v("本地通过npm建个前端demo 比如vue项目")])]),n._v(" "),t("p",[n._v("逻辑思路:\ngithub对应项目配置一个webhook,该webhook功能为接收到git push请求后会通过post访问一个指定接口.\n然后服务端 监听该请求,通过脚本命令更新代码并打包")]),n._v(" "),t("p",[n._v("第一步 GitHub配置webhook\n1.github新建一个项目,然后把前端代码提交上去\n2.进入到GitHub对应的项目页面,先点击setting,再点击webhook\n"),t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9645550-b9be47ac0c8ade15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}}),n._v("\n3.点击addwebhook按钮\n4.填写信息\nPayload URL 填写服务器公网IP和预留端口号\nContent type 选json 如图所示\n"),t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9645550-901f2302e20bdcc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}}),n._v("\n5.点击add webhook按钮\n6.此时 我们的webhook就配置完成了,我们先测下发出的信息是什么样的,\n7. 前端demo项目随便改点东西提交上去\n点击我们配置好的webhook\n"),t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9645550-1003933db68b74db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),n._v(" "),t("p",[n._v("选择 recent deliverives按钮\n"),t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9645550-cfb87ed33b5ff9e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),n._v(" "),t("p",[n._v("因为服务器还没配置对应的程序用来接收请求,发送消息列表左侧会显示红色警告\n"),t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9645550-ad7f7bbae61ce7e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),n._v(" "),t("p",[n._v("8.点一个post请求进去看看什么样子,心里有数\n重要的是respository里面的内容\n"),t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9645550-cdccfbed780e08d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),n._v(" "),t("p",[n._v("第二步 nginx配置\n我们先通过nginx把这个前端服务手动跑起来,再考虑自动发版\n博主用的是阿里云 系统是Ubuntu,如果通过apt装的nginx,前端打包后的文件不能放在~下面或者root目录下面,\n因为nginx默认没有权限.\n这时候你可以给nginx提升权限(不推荐),或者把打包后的文件放在别的目录下面.")]),n._v(" "),t("p",[n._v("1.登录服务器 退出~目录来到系统目录  切换到var目录 没有var目录可以新建一个\n"),t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9645550-bf204457fb2dfc9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),n._v(" "),t("p",[n._v("2.拉取代码并打包\n确认下服务器的sshkey已经加到GitHub上去\n装一个npm,这里推荐装yarn  npm版本太新的话install报错\n在var目录下git clone xxx 把GitHub上面对应代码done下来,比如博主的项目叫shop_admin_fe\n执行下面命令")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("cd shop_admin_fe\nyarn install\nnpm run build\n")])])]),t("p",[n._v("这时候我们应该能看到打包后的文件,比如vue项目打包文件叫dist\n"),t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9645550-f2491ac7ca814474.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),n._v(" "),t("p",[n._v("3.nginx配置\n本文不是教学nginx 所以简单说下\n输入nginx -t 找到配置文件 通过vim打开\n"),t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9645550-e3b0febc4546035c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),n._v(" "),t("p",[n._v("配置nginx端口代理")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9645550-a5af3f3fa33b888c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}}),n._v("\n博主是把前端服务配到了8082端口,所以访问服务器公网IP加8082端口即能访问网页")]),n._v(" "),t("p",[n._v("第三步 自动脚本配置 JS+SH\n博主配置好的脚本"),t("a",{attrs:{href:"https://github.com/bill-mark/fe-webhook",target:"_blank",rel:"noopener noreferrer"}},[n._v("地址"),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("思路:nodejs起一个http服务,用来监听github发送的post请求,接收到请求后执行对应的脚本文件")]),n._v(" "),t("p",[n._v("在服务器~目录或者别的目录下新建一个目录  比如叫做fe-webhook\n里面创建两个文件index.js  autobuild.sh\n也可以在本地电脑通过编辑器建好再传到服务器上\nindex.js文件内容为")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('const http = require("http");\n//var callfile = require("child_process");\n\nconst resolvePost = (req) =>\n  new Promise((resolve) => {\n    let chunk = "";\n    req.on("data", (data) => {\n      chunk += data;\n    });\n    req.on("end", () => {\n      resolve(JSON.parse(chunk));\n    });\n  });\n\n  function run_cmd(cmd, args, callback) {\n    var spawn = require(\'child_process\').spawn;\n    var child = spawn(cmd, args);\n    var resp = "";\n\n    child.stdout.on(\'data\', function(buffer) { resp += buffer.toString(); });\n    child.stdout.on(\'end\', function() { callback (resp) });\n}\n\nhttp\n  .createServer(async (req, res) => {\n    console.log("receive request");\n    console.log(req.url);\n    if (req.method === "POST" && req.url === "/") {\n      console.log("if true");\n      const data = await resolvePost(req);\n\n      let giturl = data.repository.html_url;\n\n      console.log(\'next callfile\',giturl)\n\n      //callfile.execFile("autobuild.sh", ["giturl", giturl]);\n\n      run_cmd(\'sh\', [\'./autobuild.sh\'], function(text){ console.log(text) });\n\n      res.end("ok");\n    }\n    console.log("if else");\n  })\n  .listen(3020, () => {\n    console.log("server is ready");\n  });\n\n')])])]),t("p",[n._v("大概代码思路为 引入http child_process模块,监听3020端口的post请求,接收到请求调用autobuild.sh这个脚本文件")]),n._v(" "),t("p",[n._v("autobuild.sh脚本文件编辑")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('\n# 前端在服务器的git地址\nWEB_PATH=\'/var/shop_admin_fe/\'\n\nWEB_USER=\'root\'\nWEB_USERGROUP=\'root\'\n\necho "Start"\ncd $WEB_PATH\necho `pwd`\necho "pulling source code..."\ngit fetch --all\ngit reset --hard origin/main\ngit pull\necho "next build..."\nyarn\nnpm run build\necho "build end"\n#chown -R $WEB_USER:$WEB_USERGROUP $WEB_PATH\n#echo "Finished."\n\n')])])]),t("p",[n._v("脚本其实和平时CMD命令差不多 只不过是写在文件里的 可以多次执行,\n大概逻辑:\n切换到前端代码目录,更新代码,install一遍插件再打包")]),n._v(" "),t("p",[n._v("第四步 启动\n这时候我们工作基本完成了 直接node start index.js文件即可\n然后前端代码随便更改 push上去就能自动打包了\n实际开发中为了能调试 看到JS和脚本打印的东西 ,要用PM2启动JS文件 并监听日志")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("pm2 start index.js --watch\npm2 monit appid\n")])])]),t("p",[n._v("appid是执行完pm2 start index.js --watch会打印一个表单 上面的pid\n"),t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9645550-67a0a56d954e6b51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),n._v(" "),t("p",[n._v("到此 前端GitHub自动发版就搞定了 可以提交验证下 有问题评论区留言\n参考文档 "),t("a",{attrs:{href:"https://juejin.cn/post/6844904148668792839#heading-23",target:"_blank",rel:"noopener noreferrer"}},[n._v("文档1"),t("OutboundLink")],1),n._v(" "),t("a",{attrs:{href:"https://juejin.cn/post/6844903943466647560#heading-2",target:"_blank",rel:"noopener noreferrer"}},[n._v("文档2"),t("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=i.exports}}]);