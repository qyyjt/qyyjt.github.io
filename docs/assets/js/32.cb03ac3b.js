(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{455:function(t,e,a){"use strict";a.r(e);var n=a(65),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h4",{attrs:{id:"前端性能优化-图片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端性能优化-图片"}},[t._v("#")]),t._v(" 前端性能优化--图片")]),t._v(" "),a("h5",{attrs:{id:"图片格式的选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图片格式的选择"}},[t._v("#")]),t._v(" 图片格式的选择")]),t._v(" "),a("h6",{attrs:{id:"jpeg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jpeg"}},[t._v("#")]),t._v(" JPEG")]),t._v(" "),a("p",[t._v("有损压缩，高品质的压缩方式。图片体积压缩至原有体积的50%以下时，jpg仍然可以保持60%的品质。原理为以24位存储单个图，可以呈现多达1600万种颜色，足以满足大多数场景下对色彩的要求，这一点决定了它压缩前后的质量损耗并不容易被肉眼察觉。")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ul",[a("li",[t._v("网站呈现丰富的色彩。")]),t._v(" "),a("li",[t._v("有损压缩，通过压缩大大的减少图片的体积。一般图片用60%级别比较合适，大于75%的压缩等级，图片有明显的质量下降。")]),t._v(" "),a("li",[t._v("无兼容性问题。")])]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("ul",[a("li",[t._v("JPEG图像不支持透明度的处理，透明图片使用PNG。")]),t._v(" "),a("li",[t._v("处理矢量图形和logo等线条感较强、颜色对比强烈的图像时，人为压缩的图片模糊会相当明显。")])]),t._v(" "),a("p",[t._v("使用场景：")]),t._v(" "),a("ul",[a("li",[t._v("适用于色彩丰富的图片，日常开发中，JPEG图片经常作为大的背景图、轮播图或banner图出现。")])]),t._v(" "),a("h6",{attrs:{id:"png"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#png"}},[t._v("#")]),t._v(" PNG")]),t._v(" "),a("p",[t._v("无损压缩，高保真的图片格式。同时支持8位和24位二进制的位数，八位的png最多指出256种颜色，24位可以呈现约1600万种。")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ul",[a("li",[t._v("网站呈现丰富的色彩，更强的色彩表现力，对线条的处理更加细腻。")]),t._v(" "),a("li",[t._v("支持透明度处理，透明图片的使用。")])]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("ul",[a("li",[t._v("体积太大")])]),t._v(" "),a("p",[t._v("使用场景：")]),t._v(" "),a("ul",[a("li",[t._v("线条和对比度处理更具优势，我们主要用它来呈现小的logo、颜色简单且对比强烈的图片或对比等。")]),t._v(" "),a("li",[t._v("添加透明度，使用透明图片。")])]),t._v(" "),a("h6",{attrs:{id:"gif"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gif"}},[t._v("#")]),t._v(" GIF")]),t._v(" "),a("p",[t._v("最多支持256种颜色的8位无损图片格式。")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ul",[a("li",[t._v("支持256种颜色，文件体积小。")]),t._v(" "),a("li",[t._v("支持透明。")]),t._v(" "),a("li",[t._v("支持动画。")])]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("ul",[a("li",[t._v("只支持简单色彩的图片。")])]),t._v(" "),a("p",[t._v("使用场景：")]),t._v(" "),a("ul",[a("li",[t._v("展示无限循环的动画，比如图标、表情、广告位等。")]),t._v(" "),a("li",[t._v("简单色彩的图片使用。")])]),t._v(" "),a("h6",{attrs:{id:"webp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webp"}},[t._v("#")]),t._v(" webP")]),t._v(" "),a("p",[t._v("同时提供了有损压缩和无损压缩（可逆压缩）的图片文件格式。像JPEG一样对细接丰富的图片信手拈来，像PNG一样支持透明，像GIF一样可以显示动态图片。")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ul",[a("li",[t._v("色彩丰富。")]),t._v(" "),a("li",[t._v("支持透明。")]),t._v(" "),a("li",[t._v("支持动态图片。")]),t._v(" "),a("li",[t._v("无损压缩比PNG压缩减少了45%的文件大小。")])]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("ul",[a("li",[t._v("浏览器对webP支持并不普遍。ios系统基本不支持。")])]),t._v(" "),a("h5",{attrs:{id:"图片压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图片压缩"}},[t._v("#")]),t._v(" 图片压缩")]),t._v(" "),a("h6",{attrs:{id:"有损压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有损压缩"}},[t._v("#")]),t._v(" 有损压缩")]),t._v(" "),a("p",[t._v("在压缩文件大小的过程中，损失了一部分图片的信息，也降低了图片的质量，并且这种损失是不可逆的。常见的压缩手段是按照一定的算法将邻近的像素点进行合并，去除了人肉眼无法识别的图片细节。jpg图片使用的就是有损压缩。")]),t._v(" "),a("h6",{attrs:{id:"无损压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无损压缩"}},[t._v("#")]),t._v(" 无损压缩")]),t._v(" "),a("p",[t._v("在压缩的过程中，图片的质量没有任何损伤。任何时候都可以从无损压缩过的图片中恢复出原来的信息。压缩算法是对图片的所有的数据进行编码压缩，能在保证图片的质量的同时降低图片的体积。例如png、gif使用的就是无损压缩。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("动画")]),t._v(" "),a("th",[t._v("压缩类型")]),t._v(" "),a("th",[t._v("浏览器支持")]),t._v(" "),a("th",[t._v("透明度")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("GIF")]),t._v(" "),a("td",[t._v("支持")]),t._v(" "),a("td",[t._v("无损")]),t._v(" "),a("td",[t._v("所有")]),t._v(" "),a("td",[t._v("支持")])]),t._v(" "),a("tr",[a("td",[t._v("PNG")]),t._v(" "),a("td",[t._v("不支持")]),t._v(" "),a("td",[t._v("无损")]),t._v(" "),a("td",[t._v("所以")]),t._v(" "),a("td",[t._v("支持")])]),t._v(" "),a("tr",[a("td",[t._v("JPEG")]),t._v(" "),a("td",[t._v("不支持")]),t._v(" "),a("td",[t._v("有损")]),t._v(" "),a("td",[t._v("所以")]),t._v(" "),a("td",[t._v("不支持")])]),t._v(" "),a("tr",[a("td",[t._v("webP")]),t._v(" "),a("td",[t._v("支持")]),t._v(" "),a("td",[t._v("无损或有损")]),t._v(" "),a("td",[t._v("部分支持")]),t._v(" "),a("td",[t._v("支持")])])])]),t._v(" "),a("h6",{attrs:{id:"压缩工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#压缩工具"}},[t._v("#")]),t._v(" 压缩工具")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://tinypng.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://tinypng.com/"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhitu.isux.us/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://zhitu.isux.us/"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://compressor.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://compressor.io/"),a("OutboundLink")],1)]),t._v(" "),a("h5",{attrs:{id:"webpack-压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-压缩"}},[t._v("#")]),t._v(" webpack 压缩")]),t._v(" "),a("p",[t._v("webpack配置imge-webpack-loader进行图片压缩")]),t._v(" "),a("p",[t._v("1.安装依赖")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm install --save-dev image-webpack-loader\n")])])]),a("p",[t._v("2.配置webpack")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n...\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        use: [\n          {\n            loader: 'file-loader',\n            options: {\n              name: '[name].[hash:7].[ext]'\n            },\n          },\n          {\n            loader: 'image-webpack-loader',\n            options: {\n              mozjpeg: {\n                progressive: true,\n                quality: 50,\n              },\n              optipng: {\n                enabled: true,\n              },\n              pngquant: {\n                quality: [0.5, 0.65],\n                speed: 4,\n              },\n              gifsicle: {\n                interlaced: false,\n              }\n            },\n          },\n        ],\n      },\n    ],\n  },\n}\n")])])]),a("h5",{attrs:{id:"使用雪碧图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用雪碧图"}},[t._v("#")]),t._v(" 使用雪碧图")]),t._v(" "),a("p",[t._v("雪碧图，CSS Sprites，国内也叫 CSS 精灵，是一种 CSS 图像合成技术，主要用于小图片显示。")]),t._v(" "),a("p",[t._v("浏览器请求资源的时候，同源域名请求资源的时候有最大并发限制，chrome 为 6 个，就比如你的页面上有 10 个相同 CDN 域名小图片，那么需要发起 10 次请求去拉取，分两次并发。第一次并发请求回来后，发起第二次并发。如果你把 10 个小图片合并为一张大图片的画，那么只用一次请求即可拉取下来 10 个小图片的资源。减少服务器压力，减少并发，减少请求次数。")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ul",[a("li",[t._v("减少请求个数。")])]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("ul",[a("li",[t._v("生成图片体积大，减少请求个数同时增加了图片大小。")])]),t._v(" "),a("h6",{attrs:{id:"webpack合成雪碧图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack合成雪碧图"}},[t._v("#")]),t._v(" webpack合成雪碧图")]),t._v(" "),a("p",[t._v("有相应的插件提供了自动合成雪碧图的功能并且可以自动生成对应的样式文件webpack-spritesmith")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var path = require('path')\nvar SpritesmithPlugin = require('webpack-spritesmith')\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new SpritesmithPlugin({\n      src: {\n        cwd: path.resolve(__dirname, 'src/ico'),\n        glob: '*.png',\n      },\n      target: {\n        image: path.resolve(__dirname, 'src/spritesmith-generated/sprite.png'),\n        css: path.resolve(__dirname, 'src/spritesmith-generated/sprite.styl'),\n      },\n      apiOptions: {\n        cssImageRef: '~sprite.png',\n      },\n    }),\n  ],\n}\n")])])]),a("p",[t._v("将src/ico目录下的所有png文件合成雪碧图，并且输出到对应目录，同时还可以生成对应的样式文件，样式文件的语法会根据你配置的样式文件的后缀动态生成。")]),t._v(" "),a("h5",{attrs:{id:"使用base64格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用base64格式"}},[t._v("#")]),t._v(" 使用base64格式")]),t._v(" "),a("p",[t._v("将图片转换为base64编码字符串inline到页面或css中。")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ul",[a("li",[t._v("性能提升：减少http请求，base64可以随着HTML下载到本地。")]),t._v(" "),a("li",[t._v("加密：用户无法一眼看到图片的内容，只看到编码。")]),t._v(" "),a("li",[t._v("方便引用：全局公共文件内加类名。")])]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("ul",[a("li",[t._v("图片大，图片色彩层次比较丰富，不适合这种方式，base64编码后文件过大，增加HTML页面的大小，影响加载速度。")])]),t._v(" "),a("h6",{attrs:{id:"webpack配置url-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack配置url-loader"}},[t._v("#")]),t._v(" webpack配置url-loader")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n...\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10240,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]'),\n        }\n      },\n    ],\n  },\n}\n")])])]),a("h5",{attrs:{id:"图片懒加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图片懒加载"}},[t._v("#")]),t._v(" 图片懒加载")]),t._v(" "),a("p",[t._v("图片懒加载的原理就是暂时不设置图片的 src 属性，而是将图片的 url 隐藏起来，比如先写在 data-src 里面，等当前图片是否到了可视区域再将图片真实的 url 放进 src 属性里面，从而实现图片的延迟加载。")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ul",[a("li",[t._v("减少资源的加载，页面启动只加载首屏的图片，这样能明显减少服务器的压力和流量，也能减小浏览器的负担。")]),t._v(" "),a("li",[t._v("防止并发加载的资源过多而阻塞js的加载，影响整个网站的启动，影响用户体验。")]),t._v(" "),a("li",[t._v("节省用户流量，有些用户并不想全部看完，全部加载会耗费大量流量。")])]),t._v(" "),a("h6",{attrs:{id:"js代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js代码"}},[t._v("#")]),t._v(" js代码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function lazyload() {\n  let viewHeight = document.body.clientHeight //获取可视区高度\n  let imgs = document.querySelectorAll('img[data-src]')\n  imgs.forEach((item, index) => {\n    if (item.dataset.src === '') return\n\n    // 用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置\n    let rect = item.getBoundingClientRect()\n    if (rect.bottom >= 0 && rect.top < viewHeight) {\n      item.src = item.dataset.src\n      item.removeAttribute('data-src')\n    }\n  })\n}\n\n// 可以使用节流优化一下\nwindow.addEventListener('scroll', lazyload)\n")])])]),a("h6",{attrs:{id:"intersectionobserver计算位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intersectionobserver计算位置"}},[t._v("#")]),t._v(" IntersectionObserver计算位置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const imgs = document.querySelectorAll('img[data-src]')\nconst config = {\n  rootMargin: '0px',\n  threshold: 0,\n}\nlet observer = new IntersectionObserver((entries, self) => {\n  entries.forEach((entry) => {\n    if (entry.isIntersecting) {\n      let img = entry.target\n      let src = img.dataset.src\n      if (src) {\n        img.src = src\n        img.removeAttribute('data-src')\n      }\n      // 解除观察\n      self.unobserve(entry.target)\n    }\n  })\n}, config)\n\nimgs.forEach((image) => {\n  observer.observe(image)\n})\n")])])]),a("h5",{attrs:{id:"图片预加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图片预加载"}},[t._v("#")]),t._v(" 图片预加载")]),t._v(" "),a("p",[t._v("将图片提前加载到本地缓存中，从而提升用户体验。")]),t._v(" "),a("h6",{attrs:{id:"_1-css和javascript实现预加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-css和javascript实现预加载"}},[t._v("#")]),t._v(" 1.css和JavaScript实现预加载")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#preload-01 {\n  background: url(http://domain.tld/image-01.png) no-repeat -9999px -9999px;\n}\n#preload-02 {\n  background: url(http://domain.tld/image-02.png) no-repeat -9999px -9999px;\n}\n#preload-03 {\n  background: url(http://domain.tld/image-03.png) no-repeat -9999px -9999px;\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function preloader() {\n  if (document.getElementById) {\n    document.getElementById('preload-01').style.background =\n      'url(http://domain.tld/image-01.png) no-repeat -9999px -9999px'\n    document.getElementById('preload-02').style.background =\n      'url(http://domain.tld/image-02.png) no-repeat -9999px -9999px'\n    document.getElementById('preload-03').style.background =\n      'url(http://domain.tld/image-03.png) no-repeat -9999px -9999px'\n  }\n}\nfunction addLoadEvent(func) {\n  var oldonload = window.onload\n  if (typeof window.onload != 'function') {\n    window.onload = func\n  } else {\n    window.onload = function () {\n      if (oldonload) {\n        oldonload()\n      }\n      func()\n    }\n  }\n}\naddLoadEvent(preloader)\n")])])]),a("h6",{attrs:{id:"_2-使用javascript实现预加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用javascript实现预加载"}},[t._v("#")]),t._v(" 2.使用JavaScript实现预加载")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function preloader() {\n  if (document.images) {\n    var img1 = new Image()\n    var img2 = new Image()\n    var img3 = new Image()\n    img1.src = 'http://domain.tld/path/to/image-001.gif'\n    img2.src = 'http://domain.tld/path/to/image-002.gif'\n    img3.src = 'http://domain.tld/path/to/image-003.gif'\n  }\n}\nfunction addLoadEvent(func) {\n  var oldonload = window.onload\n  if (typeof window.onload != 'function') {\n    window.onload = func\n  } else {\n    window.onload = function () {\n      if (oldonload) {\n        oldonload()\n      }\n      func()\n    }\n  }\n}\naddLoadEvent(preloader)\n")])])]),a("h5",{attrs:{id:"渐进式图片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渐进式图片"}},[t._v("#")]),t._v(" 渐进式图片")]),t._v(" "),a("p",[t._v("高品质图像加载完之前会先显示低画质版本。低画质版本由于画质低、压缩率高、尺寸小、加载很快。")]),t._v(" "),a("ul",[a("li",[t._v("普通图片渲染时，数据将按照存储时的顺序从上到下逐行扫描被显示出来的，直到所有的数据都被读取完毕，就完成了整张图片的显示。")]),t._v(" "),a("li",[t._v("渐进式图片渲染过程中，会先显示整个图片的模糊轮廓，随着扫描次数的增加，图片变得越来越清晰。这种格式的主要优点是在网络较慢的情况下，可以看到图片的轮廓知道正在加载的图片大概是什么。")])]),t._v(" "),a("p",[t._v("注：")]),t._v(" "),a("p",[t._v("很多工具和库都支持导出渐进式JPEG，比如 ImageMagick, libjpeg, jpegtran, jpeg-recompress以及imagemin。 也可以使用 gulp-imagemin 进行批量转换。")]),t._v(" "),a("p",[t._v("Photoshop导出渐进式图片，保存为JPEG格式，勾选连续。")])])}),[],!1,null,null,null);e.default=r.exports}}]);